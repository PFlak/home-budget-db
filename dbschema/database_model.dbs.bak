<?xml version="1.0" encoding="UTF-8" ?>
<project name="Home budget application" database="PostgreSQL" id="PostgreSQL-1a6" >
	<comment><![CDATA[Budget management app database for household usage]]></comment>
	<schema name="home budget application" >
		<udt name="home" udt_java_type="12" udt_precision="NONE" >
			<udt_script><![CDATA[CREATE TYPE ${name} budget application.user_role_in_group AS ENUM ('admin','guest');]]></udt_script>
		</udt>
		<udt name="transaction_type" udt_java_type="2002" udt_precision="ENUMERATION" >
			<udt_script><![CDATA[CREATE TYPE ${name} AS ENUM ( 'withdraw', 'deposit'  )]]></udt_script>
		</udt>
		<udt name="user_role_in_group" udt_java_type="2002" udt_precision="NONE" >
			<udt_script><![CDATA[CREATE TYPE ${name} AS ENUM ( 'guest', 'admin'  )]]></udt_script>
		</udt>
		<table name="categories" prior="tbl" generator_rows="0" generator_order="2" >
			<column name="category_id" prior="category_name" type="integer" length="32" jt="4" mandatory="y" >
				<identity><![CDATA[GENERATED  BY DEFAULT AS IDENTITY]]></identity>
			</column>
			<column name="category_name" type="varchar" length="100" jt="12" mandatory="y" regexp="(Dairy|Beverages|Confections|Seafood|Meat|Poultry|Grain|Cereals|Produce|Shell fish|Snails)" />
			<column name="category_description" type="varchar" length="1000" jt="12" />
			<index name="pk_categories" unique="PRIMARY_KEY" >
				<column name="category_id" />
			</index>
		</table>
		<table name="countries" prior="tbl" generator_rows="0" generator_order="1" >
			<column name="country_id" type="integer" length="32" jt="4" mandatory="y" >
				<identity><![CDATA[GENERATED  BY DEFAULT AS IDENTITY]]></identity>
			</column>
			<column name="country_name" type="varchar" length="200" jt="12" regexp="list:file=Country.txt" />
			<column name="country_code" type="char" length="5" jt="1" mandatory="y" >
				<column_options><![CDATA[UNIQUE]]></column_options>
				<comment><![CDATA[Short name of country]]></comment>
			</column>
			<column name="currency_id" type="integer" jt="4" mandatory="y" />
			<index name="pk_countries" unique="PRIMARY_KEY" >
				<column name="country_id" />
			</index>
			<index name="countries_country_code_key" unique="UNIQUE_KEY" >
				<column name="country_code" />
			</index>
			<fk name="fk_countries_currency" to_schema="home budget application" to_table="currency" update_action="cascade" >
				<fk_column name="currency_id" pk="currency_id" />
			</fk>
		</table>
		<table name="currency" prior="tbl" generator_rows="0" generator_order="0" >
			<column name="currency_id" type="integer" length="32" jt="4" mandatory="y" >
				<identity><![CDATA[GENERATED  BY DEFAULT AS IDENTITY]]></identity>
			</column>
			<column name="currency_name" type="varchar" length="100" jt="12" regexp="Australian dollar|Swiss franc|Euro|Pound sterling|Yen|US dollar" />
			<column name="currency_short" type="char" length="3" jt="1" mandatory="y" regexp="list:file=Currency.txt" >
				<column_options><![CDATA[UNIQUE]]></column_options>
				<comment><![CDATA[Short name of currenty, for example USD for Dollar]]></comment>
			</column>
			<column name="dollar_rate" prior="dollar_course" type="numeric" length="100" decimal="4" jt="2" mandatory="y" >
				<comment><![CDATA[Used for currency calculation.]]></comment>
			</column>
			<index name="pk_currency" unique="PRIMARY_KEY" >
				<column name="currency_id" />
			</index>
			<index name="currency_currency_short_key" unique="UNIQUE_KEY" >
				<column name="currency_short" />
			</index>
		</table>
		<table name="groups" prior="tbl" generator_rows="0" generator_order="10" >
			<column name="group_id" type="integer" length="32" jt="4" mandatory="y" >
				<identity><![CDATA[GENERATED  BY DEFAULT AS IDENTITY]]></identity>
			</column>
			<column name="group_name" type="varchar" jt="12" mandatory="y" regexp="(Re|Ad|Par|Tru|Thru|In|Bar|Cip|Dop|End|Em|Fro|Gro|Hap|Kli|Lom|Mon|Qwi|Rap|Sup|Sur|Tip|Tup|Un|Up|Var|Win|Zee)(ban|cad|dud|dim|er|frop|glib|hup|jub|kil|mun|nip|peb|pick|quest|rob|sap|sip|tan|tin|tum|ven|wer|werp|zap)(il|ic|im|in|up|ad|ack|am|on|ep|ed|ef|eg|aqu|ef|edg|op|oll|omm|ew|an|ex|pl)?(icator|or|ar|ax|an|ex|istor|entor|antor|in|over|ower|azz)(([ -]?Pro|Duplex|Multi){0}) (Direct|WorldWide|Holdings|International) (Inc|Company|Group|Corp.)?" >
				<defo><![CDATA['New Group'::character varying]]></defo>
			</column>
			<column name="group_description" type="varchar" length="1000" jt="12" regexp="((I|Mike|Rudi) (loves flowers|like sports|like swimming|watches football). ){1,2}" />
			<column name="group_photo" type="varchar" length="1000" jt="12" regexp="[A-Z]:\\(Windows|Win|Program|Program Files|Document and Settings|Inetpub)\\((Temp|Red Gate|Business|Sales|Test|Products|Builds|SQL Compare|SQL Data Compare|SQL Refactor|SQL Prompt|SQL Data pattern)\\){1,5}[a-z]{3,5}.(bmp|doc|xls|txt|ini|php|asm|pdf)" >
				<comment><![CDATA[Url to photo of group]]></comment>
			</column>
			<column name="creation_time" type="timestamp" jt="93" mandatory="y" >
				<defo><![CDATA[CURRENT_TIMESTAMP]]></defo>
			</column>
			<column name="update_time" type="timestamp" jt="93" />
			<column name="owner_id" type="integer" jt="4" >
				<comment><![CDATA[Id of user who created group]]></comment>
			</column>
			<index name="pk_groups" unique="PRIMARY_KEY" >
				<column name="group_id" />
			</index>
			<fk name="fk_groups_users" to_schema="home budget application" to_table="users" >
				<fk_column name="owner_id" pk="user_id" />
			</fk>
		</table>
		<table name="sessions" prior="tbl" generator_rows="0" generator_order="5" >
			<column name="session_id" type="integer" length="32" jt="4" mandatory="y" >
				<identity><![CDATA[GENERATED  BY DEFAULT AS IDENTITY]]></identity>
			</column>
			<column name="creation_time" type="timestamp" jt="93" mandatory="y" >
				<defo><![CDATA[CURRENT_TIMESTAMP]]></defo>
			</column>
			<column name="expiration_time" type="timestamp" jt="93" mandatory="y" >
				<defo><![CDATA[(CURRENT_TIMESTAMP + '24:00:00'::interval)]]></defo>
			</column>
			<column name="hash" type="text" jt="12" mandatory="y" regexp="skip" >
				<defo><![CDATA[md5(((random())::text || (clock_timestamp())::text))]]></defo>
				<comment><![CDATA[Value used to verify session on user side]]></comment>
			</column>
			<index name="pk_sessions" unique="PRIMARY_KEY" >
				<column name="session_id" />
			</index>
		</table>
		<table name="subcategories" prior="tbl" generator_rows="0" generator_order="3" >
			<column name="subcategory_id" type="integer" length="32" jt="4" mandatory="y" >
				<identity><![CDATA[GENERATED  BY DEFAULT AS IDENTITY]]></identity>
			</column>
			<column name="subcategory_name" type="varchar" length="100" jt="12" mandatory="y" regexp="(Re|Ad|Par|Tru|Thru|In|Bar|Cip|Dop|End|Em|Fro|Gro|Hap|Kli|Lom|Mon|Qwi|Rap|Sup|Sur|Tip|Tup|Un|Up|Var|Win|Zee)(ban|cad|dud|dim|er|frop|glib|hup|jub|kil|mun|nip|peb|pick|quest|rob|sap|sip|tan|tin|tum|ven|wer|werp|zap)(il|ic|im|in|up|ad|ack|am|on|ep|ed|ef|eg|aqu|ef|edg|op|oll|omm|ew|an|ex|pl)?(icator|or|ar|ax|an|ex|istor|entor|antor|in|over|ower|azz)" />
			<column name="subcategory_description" type="varchar" length="1000" jt="12" />
			<column name="category_id" type="integer" jt="4" mandatory="y" />
			<index name="pk_subcategories" unique="PRIMARY_KEY" >
				<column name="subcategory_id" />
			</index>
			<index name="unq_subcategories_category_id" unique="UNIQUE_KEY" >
				<column name="category_id" />
			</index>
			<fk name="fk_subcategories_categories" to_schema="home budget application" to_table="categories" >
				<fk_column name="category_id" pk="category_id" />
			</fk>
		</table>
		<table name="transactions" prior="tbl" generator_rows="0" generator_order="9" >
			<column name="transaction_id" type="integer" length="32" jt="4" mandatory="y" >
				<identity><![CDATA[GENERATED  BY DEFAULT AS IDENTITY]]></identity>
			</column>
			<column name="transaction_time" type="timestamp" jt="93" mandatory="y" >
				<defo><![CDATA[CURRENT_TIMESTAMP]]></defo>
			</column>
			<column name="value" type="numeric" length="10" decimal="2" jt="2" />
			<column name="transaction_type" type="home" jt="12" mandatory="y" regexp="(withdraw|deposit)" >
				<comment><![CDATA[Enum type  with two options: 'deposit' and 'withdraw']]></comment>
			</column>
			<column name="currency_id" type="integer" jt="4" mandatory="y" />
			<column name="category_id" prior="c_id" type="integer" jt="4" mandatory="y" />
			<column name="subcategory_id" type="integer" jt="4" />
			<index name="pk_transactions" unique="PRIMARY_KEY" >
				<column name="transaction_id" />
			</index>
			<index name="unq_transactions_currency_id" unique="UNIQUE_KEY" >
				<column name="currency_id" />
			</index>
			<fk name="fk_transactions_currency" to_schema="home budget application" to_table="currency" >
				<fk_column name="currency_id" pk="currency_id" />
			</fk>
			<fk name="fk_transactions_subcategories" to_schema="home budget application" to_table="subcategories" >
				<fk_column name="subcategory_id" pk="subcategory_id" />
			</fk>
			<fk name="fk_transactions_categories" to_schema="home budget application" to_table="categories" >
				<fk_column name="category_id" pk="category_id" />
			</fk>
		</table>
		<table name="users" prior="tbl" generator_rows="0" generator_order="4" spec="" >
			<comment><![CDATA[Users of the application]]></comment>
			<column name="user_id" type="integer" length="32" jt="4" mandatory="y" >
				<identity><![CDATA[GENERATED  BY DEFAULT AS IDENTITY]]></identity>
			</column>
			<column name="name" type="varchar" length="100" jt="12" mandatory="y" regexp="($First Name)" />
			<column name="surname" type="varchar" length="100" jt="12" regexp="($Last Name)" />
			<column name="nick_name" type="varchar" length="100" jt="12" mandatory="y" regexp="($First Name)[0-9]{2,6}" />
			<column name="creation_time" type="timestamp" jt="93" mandatory="y" >
				<defo><![CDATA[CURRENT_TIMESTAMP]]></defo>
				<comment><![CDATA[Timestamp of user creation]]></comment>
			</column>
			<column name="update_time" type="timestamp" jt="93" >
				<comment><![CDATA[Timestamp of user data update]]></comment>
			</column>
			<column name="email" type="varchar" length="100" jt="12" mandatory="y" >
				<column_options><![CDATA[unique]]></column_options>
			</column>
			<column name="phone_number" type="varchar" length="15" jt="12" />
			<column name="user_password" type="varchar" length="100" jt="12" mandatory="y" />
			<column name="salt" type="varchar" length="100" jt="12" mandatory="y" />
			<column name="country_id" type="integer" jt="4" mandatory="y" />
			<index name="pk_users" unique="PRIMARY_KEY" >
				<column name="user_id" />
			</index>
			<index name="unq_users_nick_name" unique="UNIQUE_INDEX" >
				<column name="nick_name" />
			</index>
			<fk name="fk_users_countries" to_schema="home budget application" to_table="countries" update_action="cascade" >
				<fk_column name="country_id" pk="country_id" />
			</fk>
		</table>
		<table name="users_groups" prior="users_group" generator_rows="0" generator_order="11" >
			<column name="user_role" prior="is_admin" type="home" jt="12" mandatory="y" regexp="(admin|guest)" >
				<defo><![CDATA['guest'::"home budget application".user_role_in_group]]></defo>
				<comment><![CDATA[Enum type with values:
- 'admin'
- 'guest' (default)]]></comment>
			</column>
			<column name="join_time" type="timestamp" jt="93" >
				<defo><![CDATA[CURRENT_TIMESTAMP]]></defo>
			</column>
			<column name="group_id" type="integer" jt="4" />
			<column name="user_id" type="integer" jt="4" />
			<index name="unq_users_groups_user_id" unique="UNIQUE_KEY" >
				<column name="user_id" />
			</index>
			<fk name="fk_users_groups_users" to_schema="home budget application" to_table="groups" >
				<fk_column name="group_id" pk="group_id" />
			</fk>
			<fk name="fk_users_groups_users_0" to_schema="home budget application" to_table="users" >
				<fk_column name="user_id" pk="user_id" />
			</fk>
		</table>
		<table name="users_groups_transactions" prior="users_groups_" generator_rows="0" generator_order="12" >
			<column name="transaction_time" type="timestamp" jt="93" mandatory="y" >
				<defo><![CDATA[CURRENT_TIMESTAMP]]></defo>
			</column>
			<column name="user_id" type="integer" jt="4" mandatory="y" />
			<column name="group_id" type="integer" jt="4" />
			<column name="transaction_id" type="integer" jt="4" mandatory="y" />
			<column name="wallet_id" type="integer" jt="4" mandatory="y" />
			<index name="unq_users_groups_transactions_user_id" unique="UNIQUE_KEY" >
				<column name="user_id" />
			</index>
			<index name="unq_users_groups_transactions_group_id" unique="UNIQUE_KEY" >
				<column name="group_id" />
			</index>
			<index name="unq_users_groups_transactions_transaction_id" unique="UNIQUE_KEY" >
				<column name="transaction_id" />
			</index>
			<fk name="fk_users_groups_transactions_transactions" to_schema="home budget application" to_table="transactions" >
				<fk_column name="transaction_id" pk="transaction_id" />
			</fk>
			<fk name="fk_users_groups_transactions_groups" to_schema="home budget application" to_table="groups" >
				<fk_column name="group_id" pk="group_id" />
			</fk>
			<fk name="fk_users_groups_transactions_users" to_schema="home budget application" to_table="users" >
				<fk_column name="user_id" pk="user_id" />
			</fk>
			<fk name="fk_users_groups_transactions_wallets" to_schema="home budget application" to_table="wallets" delete_action="cascade" update_action="cascade" >
				<fk_column name="wallet_id" pk="wallet_id" />
			</fk>
		</table>
		<table name="users_sessions" prior="tbl" generator_rows="0" generator_order="6" >
			<column name="session_id" type="integer" jt="4" mandatory="y" />
			<column name="user_id" type="integer" jt="4" mandatory="y" />
			<index name="unq_users_sessions_session_id" unique="UNIQUE_KEY" >
				<column name="session_id" />
			</index>
			<fk name="fk_users_sessions_users" to_schema="home budget application" to_table="users" delete_action="cascade" update_action="cascade" >
				<fk_column name="user_id" pk="user_id" />
			</fk>
			<fk name="fk_users_sessions_sessions" to_schema="home budget application" to_table="sessions" delete_action="cascade" update_action="cascade" >
				<fk_column name="session_id" pk="session_id" />
			</fk>
		</table>
		<table name="users_wallets" prior="users_walets" generator_rows="0" generator_order="8" >
			<column name="wallet_id" type="integer" jt="4" mandatory="y" />
			<column name="user_id" type="integer" jt="4" mandatory="y" />
			<index name="unq_users_walets_wallet_id" unique="UNIQUE_KEY" >
				<column name="wallet_id" />
			</index>
			<fk name="fk_users_walets_users" to_schema="home budget application" to_table="users" delete_action="cascade" update_action="cascade" >
				<fk_column name="user_id" pk="user_id" />
			</fk>
			<fk name="fk_users_wallets_wallets" to_schema="home budget application" to_table="wallets" delete_action="cascade" update_action="cascade" >
				<fk_column name="wallet_id" pk="wallet_id" />
			</fk>
		</table>
		<table name="wallets" prior="tbl" generator_rows="0" generator_order="7" spec="" >
			<column name="wallet_id" type="integer" length="32" jt="4" mandatory="y" >
				<identity><![CDATA[GENERATED  BY DEFAULT AS IDENTITY]]></identity>
			</column>
			<column name="currency_id" type="integer" jt="4" mandatory="y" >
				<comment><![CDATA[Currency used for this wallet]]></comment>
			</column>
			<column name="bilance" type="money" jt="3" mandatory="y" >
				<defo><![CDATA[0]]></defo>
			</column>
			<column name="wallet_name" type="varchar" length="100" jt="12" mandatory="y" />
			<column name="creation_time" type="timestamp" jt="93" mandatory="y" >
				<defo><![CDATA[CURRENT_TIMESTAMP]]></defo>
			</column>
			<index name="pk_wallets" unique="PRIMARY_KEY" >
				<column name="wallet_id" />
			</index>
			<fk name="fk_wallets_currency" to_schema="home budget application" to_table="currency" delete_action="restrict" update_action="restrict" >
				<fk_column name="currency_id" pk="currency_id" />
			</fk>
		</table>
		<function name="add_category" id="Function-877" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION "home budget application".add_category(p_subcategory_name character varying, p_subcategory_description character varying, p_category_name character varying)
 RETURNS "home budget application".categories
 LANGUAGE plpgsql
AS $function$
DECLARE
    v_subcategory "home budget application".subcategories%ROWTYPE;
    v_category_id integer;
BEGIN
    SELECT category_id INTO v_category_id
    FROM "home budget application".categories
    WHERE category_name = p_category_name;
    IF v_category_id IS NULL THEN
        RAISE EXCEPTION 'Category % does not exist', p_category_name;
        RETURN NULL;
    END IF;
    -- Insert the category
    INSERT INTO "home budget application".subcategories (
        subcategory_name, subcategory_description, category_id
    ) VALUES (
        p_subcategory_name, p_subcategory_description
    ) RETURNING * INTO v_subcategory;
    
    RETURN v_subcategory;
END;
$function$
;]]></string>
			<input_param name="p_subcategory_name" jt="-1" type="character varying" inOut="1" />
			<input_param name="p_subcategory_description" jt="-1" type="character varying" inOut="1" />
			<input_param name="p_category_name" jt="-1" type="character varying" inOut="1" />
		</function>
		<function name="add_category" id="Function-d4b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION "home budget application".add_category(p_category_name character varying, p_category_description character varying)
 RETURNS "home budget application".categories
 LANGUAGE plpgsql
AS $function$
DECLARE
    v_category "home budget application".categories%ROWTYPE;
BEGIN
    -- Insert the category
    INSERT INTO "home budget application".categories (
        category_name, category_description
    ) VALUES (
        p_category_name, p_category_description
    ) RETURNING * INTO v_category;
    
    RETURN v_category;
END;
$function$
;]]></string>
			<input_param name="p_category_name" jt="-1" type="character varying" inOut="1" />
			<input_param name="p_category_description" jt="-1" type="character varying" inOut="1" />
		</function>
		<function name="add_country" id="Function-1ba7" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION "home budget application".add_country(p_country_name character varying, p_country_code character, p_currency_short numeric)
 RETURNS "home budget application".countries
 LANGUAGE plpgsql
AS $function$
DECLARE
    v_country "home budget application".countries%ROWTYPE;
    v_currency_id INTEGER;
BEGIN
    -- Check if the currency exists
    SELECT currency_id INTO v_currency_id
    FROM "home budget application".currency
    WHERE currency_short = p_currency_short;
    -- If the currency ID is null, raise an exception and do not insert the country
    IF v_currency_id IS NULL THEN
        RAISE EXCEPTION 'Currency with short code % does not exist', p_currency_short;
        RETURN NULL;
    END IF;
    -- Insert the country if the currency exists
    INSERT INTO "home budget application".countries (
        country_name, country_code, currency_id
    ) VALUES (
        p_country_name, p_country_code, v_currency_id
    ) RETURNING * INTO v_country;
    
    RETURN v_country;
END;
$function$
;]]></string>
			<input_param name="p_country_name" jt="-1" type="character varying" inOut="1" />
			<input_param name="p_country_code" jt="-1" type="character" inOut="1" />
			<input_param name="p_currency_short" jt="-1" type="numeric" inOut="1" />
		</function>
		<function name="add_country" id="Function-b96" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION "home budget application".add_country(p_country_name character varying, p_country_code character, p_currency_short character)
 RETURNS "home budget application".countries
 LANGUAGE plpgsql
AS $function$
DECLARE
    v_country "home budget application".countries%ROWTYPE;
    v_currency_id INTEGER;
BEGIN
    -- Check if the currency exists
    SELECT currency_id INTO v_currency_id
    FROM "home budget application".currency
    WHERE currency_short = p_currency_short;
    -- If the currency ID is null, raise an exception and do not insert the country
    IF v_currency_id IS NULL THEN
        RAISE EXCEPTION 'Currency with short code % does not exist', p_currency_short;
        RETURN NULL;
    END IF;
    -- Insert the country if the currency exists
    INSERT INTO "home budget application".countries (
        country_name, country_code, currency_id
    ) VALUES (
        p_country_name, p_country_code, v_currency_id
    ) RETURNING * INTO v_country;
    
    RETURN v_country;
END;
$function$
;]]></string>
			<input_param name="p_country_name" jt="-1" type="character varying" inOut="1" />
			<input_param name="p_country_code" jt="-1" type="character" inOut="1" />
			<input_param name="p_currency_short" jt="-1" type="character" inOut="1" />
		</function>
		<function name="add_currency" id="Function-1d8b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION "home budget application".add_currency(p_currency_name character varying, p_currency_short character, p_dollar_rate numeric)
 RETURNS "home budget application".currency
 LANGUAGE plpgsql
AS $function$
DECLARE
    v_currency "home budget application".currency%ROWTYPE;
BEGIN
    INSERT INTO "home budget application".currency (
        currency_name, currency_short, dollar_rate
    ) VALUES (
        p_currency_name, p_currency_short, p_dollar_rate
    ) RETURNING * INTO v_currency;
    
    RETURN v_currency;
END;
$function$
;]]></string>
			<input_param name="p_currency_name" jt="-1" type="character varying" inOut="1" />
			<input_param name="p_currency_short" jt="-1" type="character" inOut="1" />
			<input_param name="p_dollar_rate" jt="-1" type="numeric" inOut="1" />
		</function>
		<function name="add_subcategory" id="Function-c32" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION "home budget application".add_subcategory(p_subcategory_name character varying, p_subcategory_description character varying, p_category_name character varying)
 RETURNS "home budget application".subcategories
 LANGUAGE plpgsql
AS $function$
DECLARE
    v_subcategory "home budget application".subcategories%ROWTYPE;
    v_category_id INTEGER;
BEGIN
    -- Check if the category exists
    SELECT category_id INTO v_category_id
    FROM "home budget application".categories
    WHERE category_name = p_category_name;
    -- If the category ID is null, raise an exception and do not insert the subcategory
    IF v_category_id IS NULL THEN
        RAISE EXCEPTION 'Category with name % does not exist', p_category_name;
        RETURN NULL;
    END IF;
    -- Insert the subcategory if the category exists
    INSERT INTO "home budget application".subcategories (
        subcategory_name, subcategory_description, category_id
    ) VALUES (
        p_subcategory_name, p_subcategory_description, v_category_id
    ) RETURNING * INTO v_subcategory;
    
    RETURN v_subcategory;
END;
$function$
;]]></string>
			<input_param name="p_subcategory_name" jt="-1" type="character varying" inOut="1" />
			<input_param name="p_subcategory_description" jt="-1" type="character varying" inOut="1" />
			<input_param name="p_category_name" jt="-1" type="character varying" inOut="1" />
		</function>
		<function name="create_user" id="Function-14ff" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION "home budget application".create_user(p_name character varying, p_email character varying, p_user_password character varying, p_country_short character, p_surname character varying DEFAULT NULL::character varying, p_nick_name character varying DEFAULT NULL::character varying, p_phone_number character varying DEFAULT NULL::character varying)
 RETURNS "home budget application".users
 LANGUAGE plpgsql
AS $function$
DECLARE
    v_user "home budget application".users%ROWTYPE;
    v_salt VARCHAR := md5(random()::text || clock_timestamp()::text);
    v_hashed_password VARCHAR := md5(p_user_password || v_salt);
    v_country_id INTEGER;
    v_sequence INTEGER := 1;
    v_new_nick_name VARCHAR;
BEGIN
    -- Check if email has correct syntax
    IF p_email !~ '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$' THEN
        RAISE EXCEPTION 'Invalid email format: %', p_email;
        RETURN NULL;
    END IF;
    -- Lookup country_id based on country_short
    SELECT country_id INTO v_country_id
    FROM "home budget application".countries
    WHERE country_code = p_country_short;
    -- If country_id is null, raise an exception
    IF v_country_id IS NULL THEN
        RAISE EXCEPTION 'Country with short code % does not exist', p_country_short;
        RETURN NULL;
    END IF;
    -- Generate a unique nick_name if not provided
    IF p_nick_name IS NULL THEN
        v_new_nick_name := p_name || to_char(floor(random() * 9 + 1)::integer, 'FM0000');
        -- Check if the generated nick_name already exists
        WHILE EXISTS (SELECT 1 FROM "home budget application".users WHERE nick_name = v_new_nick_name) LOOP
            v_sequence := v_sequence + 1;
            v_new_nick_name := p_name || to_char(v_sequence, 'FM0000');
        END LOOP;
        p_nick_name := v_new_nick_name;
    ELSE
        -- Check if the provided nick_name already exists
        WHILE EXISTS (SELECT 1 FROM "home budget application".users WHERE nick_name = p_nick_name) LOOP
            v_sequence := v_sequence + 1;
            p_nick_name := p_nick_name || to_char(v_sequence, 'FM0000');
        END LOOP;
    END IF;
    -- Insert the new user
    INSERT INTO "home budget application".users (
        name, surname, nick_name, email, phone_number, user_password, salt, country_id
    ) VALUES (
        p_name, p_surname, p_nick_name, p_email, p_phone_number, v_hashed_password, v_salt, v_country_id
    ) RETURNING * INTO v_user;
    RETURN v_user;
END;
$function$
;]]></string>
			<input_param name="p_name" jt="-1" type="character varying" inOut="1" />
			<input_param name="p_email" jt="-1" type="character varying" inOut="1" />
			<input_param name="p_user_password" jt="-1" type="character varying" inOut="1" />
			<input_param name="p_country_short" jt="-1" type="character" inOut="1" />
			<input_param name="p_surname" jt="-1" type="character varying" inOut="1" />
			<input_param name="p_nick_name" jt="-1" type="character varying" inOut="1" />
			<input_param name="p_phone_number" jt="-1" type="character varying" inOut="1" />
		</function>
		<function name="create_wallet" id="Function-657" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION "home budget application".create_wallet(
    p_session_hash TEXT,
    p_wallet_name VARCHAR,
    p_currency_short CHAR(3)
)
RETURNS "home budget application".wallets
LANGUAGE plpgsql
AS $function$
DECLARE
    v_user_id INTEGER;
    v_wallet "home budget application".wallets%ROWTYPE;
    v_currency_id INTEGER;
BEGIN
    -- Verify session and get user_id
    v_user_id := "home budget application".verify_session(p_session_hash);

    -- If user_id is null, raise an exception
    IF v_user_id IS NULL THEN
        RAISE EXCEPTION 'Invalid or expired session';
        RETURN NULL;
    END IF;

    -- Lookup currency_id based on currency_short
    SELECT currency_id INTO v_currency_id
    FROM "home budget application".currency
    WHERE currency_short = p_currency_short;

    -- If currency_id is null, raise an exception
    IF v_currency_id IS NULL THEN
        RAISE EXCEPTION 'Currency with short code % does not exist', p_currency_short;
        RETURN NULL;
    END IF;

    -- Create a new wallet
    INSERT INTO "home budget application".wallets (
        wallet_name, currency_id
    ) VALUES (
        p_wallet_name, v_currency_id
    ) RETURNING * INTO v_wallet;

    -- Link the wallet with the user
    INSERT INTO "home budget application".users_wallets (
        wallet_id, user_id
    ) VALUES (
        v_wallet.wallet_id, v_user_id
    );

    -- Return the wallet
    RETURN v_wallet;
END;
$function$
;
]]></string>
			<input_param name="p_session_hash" jt="-1" type="text" inOut="1" />
			<input_param name="p_wallet_name" jt="-1" type="character varying" inOut="1" />
			<input_param name="p_currency_short" jt="-1" type="character" inOut="1" />
		</function>
		<function name="login_user" id="Function-17ab" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION "home budget application".login_user(p_email character varying, p_user_password character varying)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
DECLARE
    v_user "home budget application".users%ROWTYPE;
    v_session "home budget application".sessions%ROWTYPE;
BEGIN
    -- Retrieve user by email
    SELECT * INTO v_user
    FROM "home budget application".users
    WHERE email = p_email;
    -- Check if user exists and verify password
    IF v_user.user_id IS NULL THEN
        RAISE EXCEPTION 'User with email % does not exist', p_email;
        RETURN NULL;
    ELSIF v_user.user_password != md5(p_user_password || v_user.salt) THEN
        RAISE EXCEPTION 'Incorrect password for email %', p_email;
        RETURN NULL;
    END IF;
    -- Create a new session
    INSERT INTO "home budget application".sessions DEFAULT VALUES
    RETURNING * INTO v_session;
    -- Link the session with the user
    INSERT INTO "home budget application".users_sessions (
        session_id, user_id
    ) VALUES (
        v_session.session_id, v_user.user_id
    );
    -- Return the session hash
    RETURN v_session.hash;
END;
$function$
;]]></string>
			<input_param name="p_email" jt="-1" type="character varying" inOut="1" />
			<input_param name="p_user_password" jt="-1" type="character varying" inOut="1" />
		</function>
		<function name="update_group_update_time" id="Function-a2e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION "home budget application".update_group_update_time()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
    NEW.update_time = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$function$
;]]></string>
			<result_param jt="-1" />
		</function>
		<function name="update_user_update_time" id="Function-21ea" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION "home budget application".update_user_update_time()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
    NEW.update_time = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$function$
;]]></string>
			<result_param jt="-1" />
			<result_param jt="-1" />
		</function>
		<function name="verify_session" id="Function-906" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION "home budget application".verify_session(
    p_session_hash TEXT
)
RETURNS INTEGER
LANGUAGE plpgsql
AS $function$
DECLARE
    v_session "home budget application".sessions%ROWTYPE;
    v_user_id INTEGER;
BEGIN
    -- Retrieve session by session hash
    SELECT * INTO v_session
    FROM "home budget application".sessions
    WHERE hash = p_session_hash;

    -- Check if session exists and is still valid
    IF v_session.session_id IS NULL THEN
        RETURN NULL;
    ELSIF v_session.expiration_time < CURRENT_TIMESTAMP THEN
        RETURN NULL;
    ELSE
        -- Retrieve user_id from users_sessions
        SELECT user_id INTO v_user_id
        FROM "home budget application".users_sessions
        WHERE session_id = v_session.session_id;

        RETURN v_user_id;
    END IF;
END;
$function$
;]]></string>
			<input_param name="p_session_hash" jt="-1" type="text" inOut="1" />
		</function>
		<trigger name="group_update_time_trigger" table="groups" id="Trigger-58c" isSystem="false" >
			<string><![CDATA[CREATE TRIGGER group_update_time_trigger BEFORE UPDATE ON "home budget application".groups FOR EACH ROW EXECUTE FUNCTION "home budget application".update_group_update_time()]]></string>
		</trigger>
		<trigger name="user_update_time_trigger" table="users" id="Trigger-1b00" isSystem="false" >
			<string><![CDATA[CREATE TRIGGER user_update_time_trigger BEFORE UPDATE ON "home budget application".users FOR EACH ROW EXECUTE FUNCTION "home budget application".update_user_update_time()]]></string>
		</trigger>
	</schema>
	<layout name="Default Layout" id="Layout-211" joined_routing="y" show_relation="columns" >
		<comment><![CDATA[Default Layout]]></comment>
		<entity schema="home budget application" name="categories" color="C1D8EE" x="1472" y="48" />
		<entity schema="home budget application" name="countries" color="EEC1EB" x="960" y="48" />
		<entity schema="home budget application" name="currency" color="EEC1EB" x="1120" y="48" />
		<entity schema="home budget application" name="groups" color="C1D8EE" x="768" y="224" />
		<entity schema="home budget application" name="sessions" color="C1D8EE" x="304" y="528" />
		<entity schema="home budget application" name="subcategories" color="C1D8EE" x="1472" y="176" />
		<entity schema="home budget application" name="transactions" color="C1D8EE" x="1200" y="256" />
		<entity schema="home budget application" name="users" color="C1D8EE" x="304" y="96" />
		<entity schema="home budget application" name="users_groups" color="CAEED2" x="816" y="400" />
		<entity schema="home budget application" name="users_groups_transactions" color="CAEED2" x="960" y="720" />
		<entity schema="home budget application" name="users_sessions" color="CAEED2" x="304" y="432" />
		<entity schema="home budget application" name="users_wallets" color="CAEED2" x="64" y="336" />
		<entity schema="home budget application" name="wallets" color="C1D8EE" x="48" y="432" />
		<script name="SQL_Editor" id="Editor-7ac" language="SQL" >
			<string><![CDATA[COMMIT;
-- Test user_update_time_trigger
BEGIN;
INSERT INTO "home budget application".users (name, nick_name, email, user_password, salt, country_id)
VALUES ('Tester', 'Tester#2', 'email', 'password', 'salt', 1);

SELECT update_time FROM "home budget application".users WHERE nick_name='Tester#2';

UPDATE "home budget application".users SET email='NEW email' WHERE nick_name='Tester#2';

SELECT update_time, email FROM "home budget application".users WHERE nick_name='Tester#2';

COMMIT;]]></string>
		</script>
		<script name="SQL_Editor_001" id="Editor-2459" language="SQL" >
			<string><![CDATA[SELECT * FROM "home budget application".users WHERE nick_name='Tester#2';]]></string>
		</script>
		<script name="SQL_Editor_002" id="Editor-268b" language="SQL" >
			<string><![CDATA[BEGIN;
SELECT * FROM "home budget application".add_currency(
    'Dollar1', 'USD', 1
);
COMMIT;
]]></string>
		</script>
	</layout>
</project>